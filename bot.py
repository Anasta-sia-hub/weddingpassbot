import os
import sqlite3
import qrcode
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import LabeledPrice, PreCheckoutQuery, ContentType, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

# ====================
# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ====================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")  # –¢–æ–∫–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç (–ÆKassa)
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # –¢–≤–æ–π ID (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
COMMISSION = 0.1  # 10% –∫–æ–º–∏—Å—Å–∏—è

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ====================
# üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# ====================
conn = sqlite3.connect("weddings.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS weddings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    seller_id INTEGER,
    description TEXT,
    price INTEGER,
    status TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    wedding_id INTEGER,
    buyer_id INTEGER,
    amount INTEGER,
    commission INTEGER,
    status TEXT
)
""")
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    agreed INTEGER DEFAULT 0,
    agreement_date TEXT
)
''')
conn.commit()

# ====================
# üìú –û—Ñ–µ—Ä—Ç–∞
# ====================
offer_text = (
    "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞\n\n"
    "–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:\n\n"
    "1Ô∏è‚É£ –Ø (–ê–≥–µ–Ω—Ç) –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤.\n"
    "2Ô∏è‚É£ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ ‚Äî 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–∞.\n"
    "3Ô∏è‚É£ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç 90% —Å—É–º–º—ã.\n"
    "4Ô∏è‚É£ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—Å—ë—Ç –ü—Ä–æ–¥–∞–≤–µ—Ü.\n"
    "5Ô∏è‚É£ –ê–≥–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –æ—Ç–º–µ–Ω—É.\n"
    "6Ô∏è‚É£ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è¬ª –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–æ–π –æ—Ñ–µ—Ä—Ç–æ–π.\n\n"
    "üëâ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: https://example.com/oferta.pdf"
)

agree_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
agree_kb.add(types.KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è"))

# ====================
# /start
# ====================
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    cursor.execute("SELECT agreed FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user and user[0]:
        await message.answer(
            "üíç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å (/sell) –∏ –ø–æ–∫—É–ø–∞—Ç—å (/buylist) –±–∏–ª–µ—Ç—ã."
        )
    else:
        await message.answer(offer_text, reply_markup=agree_kb)

# ====================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–µ—Ä—Ç—ã
# ====================
@dp.message_handler(lambda m: m.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è")
async def agreed(message: types.Message):
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, agreed, agreement_date) VALUES (?, ?, ?)",
        (message.from_user.id, 1, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    )
    conn.commit()
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã {datetime.now().strftime('%d.%m.%Y %H:%M')}.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )

# ====================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
# ====================
async def check_agreement(user_id: int) -> bool:
    cursor.execute("SELECT agreed FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    return user and user[0] == 1

# ====================
# üë∞ –ü—Ä–æ–¥–∞–≤–µ—Ü: –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
# ====================
@dp.message_handler(commands=['sell'])
async def sell(message: types.Message):
    if not await check_agreement(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–µ—Ä–µ–∑ /start.")
        return
    await message.answer("–û–ø–∏—à–∏ —Å–≤–æ—é —Å–≤–∞–¥—å–±—É (–¥–∞—Ç–∞, –º–µ—Å—Ç–æ, —Å–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π, —Ü–µ–Ω–∞ –∑–∞ –º–µ—Å—Ç–æ –≤ —Ä—É–±–ª—è—Ö):")

    @dp.message_handler(lambda msg: msg.chat.id == message.chat.id)
    async def get_desc(msg: types.Message):
        try:
            parts = msg.text.rsplit(" ", 1)
            description = parts[0]
            price = int(parts[1])
        except:
            await msg.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏ —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–æ–π.")
            return

        cursor.execute(
            "INSERT INTO weddings (seller_id, description, price, status) VALUES (?, ?, ?, ?)",
            (msg.from_user.id, description, price, "pending")
        )
        conn.commit()
        await msg.answer("üì© –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        await bot.send_message(
            ADMIN_ID,
            f"üëÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n{description}\n–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
            f"–û–¥–æ–±—Ä–∏—Ç—å: /approve_{cursor.lastrowid}\n–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /reject_{cursor.lastrowid}"
        )
        dp.message_handlers.unregister(get_desc)

# ====================
# üîé –ê–¥–º–∏–Ω: –º–æ–¥–µ—Ä–∞—Ü–∏—è
# ====================
@dp.message_handler(lambda m: m.text and m.text.startswith("/approve_"))
async def approve(message: types.Message):
    wid = int(message.text.split("_")[1])
    cursor.execute("UPDATE weddings SET status=? WHERE id=?", ("approved", wid))
    conn.commit()
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ {wid} –æ–¥–æ–±—Ä–µ–Ω–∞!")

@dp.message_handler(lambda m: m.text and m.text.startswith("/reject_"))
async def reject(message: types.Message):
    wid = int(message.text.split("_")[1])
    cursor.execute("UPDATE weddings SET status=? WHERE id=?", ("rejected", wid))
    conn.commit()
    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ {wid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

# ====================
# üéü –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: —Å–ø–∏—Å–æ–∫
# ====================
@dp.message_handler(commands=['buylist'])
async def buylist(message: types.Message):
    if not await check_agreement(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–µ—Ä–µ–∑ /start.")
        return
    cursor.execute("SELECT id, description, price FROM weddings WHERE status='approved'")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    for row in rows:
        wid, desc, price = row
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –∑–∞ {price}‚ÇΩ", callback_data=f"buy_{wid}"))
        await message.answer(f"üíç –°–≤–∞–¥—å–±–∞ #{wid}\n\n{desc}", reply_markup=kb)

# ====================
# üí≥ –û–ø–ª–∞—Ç–∞ —Å —ç—Å–∫—Ä–æ—É
# ====================
@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def process_buy(call: types.CallbackQuery):
    if not await check_agreement(call.from_user.id):
        await call.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–µ—Ä–µ–∑ /start.")
        return

    wid = int(call.data.split("_")[1])
    cursor.execute("SELECT description, price, seller_id FROM weddings WHERE id=?", (wid,))
    wedding = cursor.fetchone()
    if not wedding:
        await call.message.answer("–≠—Ç–∞ —Å–≤–∞–¥—å–±–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    desc, price, seller_id = wedding
    PRICE = [LabeledPrice(label=f"–ë–∏–ª–µ—Ç –Ω–∞ —Å–≤–∞–¥—å–±—É #{wid}", amount=price * 100)]
    await bot.send_invoice(
        chat_id=call.from_user.id,
        title=f"–ë–∏–ª–µ—Ç –Ω–∞ —Å–≤–∞–¥—å–±—É #{wid}",
        description=desc,
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=PRICE,
        start_parameter=f"wedding-ticket-{wid}",
        payload=f"ticket-{wid}"
    )

@dp.pre_checkout_query_handler(lambda q: True)
async def checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    wid = int(payload.split("-")[1])
    amount = message.successful_payment.total_amount // 100
    commission_amount = int(amount * COMMISSION)
    buyer_id = message.from_user.id

    cursor.execute(
        "INSERT INTO payments (wedding_id, buyer_id, amount, commission, status) VALUES (?, ?, ?, ?, ?)",
        (wid, buyer_id, amount, commission_amount, "pending")
    )
    conn.commit()

    img = qrcode.make(f"Ticket#{wid}-User{buyer_id}")
    filename = f"ticket_{wid}_{buyer_id}.png"
    img.save(filename)
    await message.answer(f"üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –¥–µ–Ω—å–≥–∏ —É–¥–µ—Ä–∂–∞–Ω—ã –Ω–∞ —ç—Å–∫—Ä–æ—É. –ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞: {commission_amount}‚ÇΩ")
    await message.answer_photo(open(filename, "rb"))

    seller_amount = amount - commission_amount
    # TODO: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Å–µ–±–µ
    # TODO: –û—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É —á–µ—Ä–µ–∑ –ÆKassa Payout API

# ====================
# üîë –ê–¥–º–∏–Ω: —ç—Å–∫—Ä–æ—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# ====================
@dp.message_handler(lambda m: m.text.startswith("/release_"))
async def release_payment(message: types.Message):
    pid = int(message.text.split("_")[1])
    cursor.execute("SELECT wedding_id, buyer_id, amount, commission FROM payments WHERE id=? AND status='pending'", (pid,))
    payment = cursor.fetchone()
    if not payment:
        await message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    wedding_id, buyer_id, amount, commission = payment
    cursor.execute("UPDATE payments SET status=? WHERE id=?", ("released", pid))
    conn.commit()
    await message.answer(f"üí∞ –ü–ª–∞—Ç—ë–∂ #{pid} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –ø—Ä–æ–¥–∞–≤—Ü—É ({amount - commission}‚ÇΩ).")
    await bot.send_message(buyer_id, f"‚úÖ –ü–ª–∞—Ç—ë–∂ #{pid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Å–≤–∞–¥—å–±–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å!")

@dp.message_handler(lambda m: m.text.startswith("/refund_"))
async def refund_payment(message: types.Message):
    pid = int(message.text.split("_")[1])
    cursor.execute("SELECT buyer_id FROM payments WHERE id=? AND status='pending'", (pid,))
    payment = cursor.fetchone()
    if not payment:
        await message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    buyer_id = payment[0]
    cursor.execute("UPDATE payments SET status=? WHERE id=?", ("refunded", pid))
    conn.commit()
    await message.answer(f"üí∏ –ü–ª–∞—Ç—ë–∂ #{pid} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
    await bot.send_message(buyer_id, f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ #{pid} –≤–æ–∑–≤—Ä–∞—â—ë–Ω, —Å–≤–∞–¥—å–±–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å.")

# ====================
# üöÄ –ó–∞–ø—É—Å–∫
# ====================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
